/*=========================================================================

  Program:   ORFEO Toolbox
  Language:  C++
  Date:      $Date$
  Version:   $Revision$


  Copyright (c) Centre National d'Etudes Spatiales. All rights reserved.
  See OTBCopyright.txt for details.


  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#include "otbVectorData.h"
#include "otbVectorDataFileReader.h"
#include "otbVectorDataToLabelMapWithAttributesFilter.h"
#include "otbAttributesMapLabelObject.h"
#include "otbVectorDataProperties.h"
#include "itkLabelMapToLabelImageFilter.h"
#include "itkLabelMapToBinaryImageFilter.h"
#include "otbImage.h"
#include "otbImageFileWriter.h"
#include "otbSpatialisationFilter.h"

int otbVectorDataTest(int argc, char * argv[])
{
  const char * infilename  = argv[1];
  const char * outfilename = argv[2];

  typedef unsigned short LabelType;
  const unsigned int Dimension = 2;
  typedef otb::Image<LabelType, Dimension>                                    LabeledImageType;
  typedef otb::ImageFileWriter<LabeledImageType>                              WriterType;
  typedef otb::VectorData<double, Dimension>                                  VectorDataType;
  typedef otb::AttributesMapLabelObject<LabelType, Dimension, std::string>         LabelObjectType;
  typedef itk::LabelMap<LabelObjectType>                                      LabelMapType;
  typedef otb::VectorDataFileReader<VectorDataType>                           VectorDataFileReaderType;
  typedef otb::VectorDataToLabelMapWithAttributesFilter<VectorDataType, LabelMapType>       VectorDataToLabelMapFilterType;
  typedef otb::VectorDataProperties<VectorDataType>                           VectorDataPropertiesType;
  typedef itk::LabelMapToLabelImageFilter<LabelMapType, LabeledImageType>     LabelMapToLabelImageFilterType;
//   typedef itk::LabelMapToBinaryImageFilter<LabelMapType, LabeledImageType>     LabelMapToLabelImageFilterType;
  typedef VectorDataType::DataNodeType::PolygonType::RegionType               RegionType;
  
  /** Instantiation of pointer objects*/
  VectorDataFileReaderType::Pointer reader = VectorDataFileReaderType::New();
//   VectorDataToLabelMapFilterType::Pointer filter = VectorDataToLabelMapFilterType::New();
  VectorDataPropertiesType::Pointer vectorDataProperties = VectorDataPropertiesType::New();
  LabelMapToLabelImageFilterType::Pointer labelMapToImageFilter = LabelMapToLabelImageFilterType::New();
  WriterType::Pointer writer = WriterType::New();
  RegionType region;
  LabelMapType::PointType origin;

  typedef otb::SpatialisationFilter<VectorDataType,LabelMapType,LabeledImageType> FilterType;

  FilterType::Pointer filter = FilterType::New();


  reader->SetFileName(infilename);
  reader->Update();

  filter->SetInputVectorData(reader->GetOutput());
  filter->UpdateData();
  
    //Write the result to an image file
  writer->SetFileName(outfilename);
  writer->SetInput(filter->GetOutputImage());
  writer->Update();
  
  std::cout<<"nb labels : "<<filter->GetOutputLabelMap()->GetNumberOfLabelObjects()<<std::endl;
  filter->GetOutputLabelMap()->PrintLabelObjects();

//   //VectorDataProperties is needed to compute the ROI of the vectorData
//   //set the input vectordata to the vectordataproperties
//   vectorDataProperties->SetVectorDataObject(reader->GetOutput());
//   vectorDataProperties->SetBoundingRegion(region);
//   //Compute the global bounding box of the vectordata
//   vectorDataProperties->ComputeBoundingRegion();
// 
//   origin[0] = vectorDataProperties->GetBoundingRegion().GetImageRegion().GetIndex(0);
//   origin[1] = vectorDataProperties->GetBoundingRegion().GetImageRegion().GetIndex(1);
// 
//   
//   //Set size,origin and spacing of the output labelmap
//   filter->SetInput(reader->GetOutput());
//   filter->SetSize(vectorDataProperties->GetBoundingRegion().GetImageRegion().GetSize());
//   filter->SetOrigin(origin);
//   filter->SetSpacing(reader->GetOutput()->GetSpacing());
//   filter->Update();
//   
//   std::cout<<"area  : "<<filter->GetOutput()->GetNthLabelObject(0)->GetAttribute("area")<<std::endl;
// //   std::cout<<"nb labels : "<<filter->GetOutput()->GetNumberOfLabelObjects()<<std::endl;
// //   std::cout<<"labels : "<<filter->GetOutput()->GetLabels()[0]<<" , "<<filter->GetOutput()->GetLabels()[1]<<" , "<<filter->GetOutput()->GetLabels()[2]<<std::endl;
// //   std::cout<<"label map largest region : "<<filter->GetOutput()->GetLargestPossibleRegion()<<std::endl;
//   
// //   filter->GetOutput()->PrintLabelObjects();
// //   
//   LabelObjectType::LineContainerType lineContainer = filter->GetOutput()->GetNthLabelObject(0)->GetLineContainer();
//   LabelObjectType::LineContainerType::const_iterator it;
//   
//   typedef LabeledImageType::IndexType IndexType;
//   for(it=lineContainer.begin();it!=lineContainer.end();it++)
//   {
//       IndexType index = it->GetIndex();
//       std::cout<<"index = "<<index[0]<<" , "<<index[1]<<std::endl;
//   }
// 
//   
//   // Translate the LabelMap in a labeld image
//   labelMapToImageFilter->SetInput(filter->GetOutput());



  return EXIT_SUCCESS;
}
