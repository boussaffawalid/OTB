/*=========================================================================

  Program:   ORFEO Toolbox
  Language:  C++
  Date:      $Date$
  Version:   $Revision$


  Copyright (c) Centre National d'Etudes Spatiales. All rights reserved.
  See OTBCopyright.txt for details.


  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#include "otbSpatialisationFilter.h"
#include "otbVectorImage.h"
#include "otbImage.h"
#include "otbImageFileWriter.h"
#include "otbLabelMapToSimulatedImageFilter.h"
#include "otbVectorDataFileReader.h"
#include "otbStreamingResampleImageFilter.h"
#include "otbProlateInterpolateImageFunction.h"
#include "otbMultiToMonoChannelExtractROI.h"
#include "otbImageList.h"
#include "otbImageListToVectorImageFilter.h"

#include "otbSVMImageModelEstimator.h"
#include "otbSVMImageClassificationFilter.h"
#include "otbImageFileReader.h"

int otbImageSimulationMethodTest(int argc, char * argv[])
{
   const char * infilename  = argv[1];
   const char * inTrainingfilename  = argv[2];
   const char * satRSRFilename = argv[3];
   unsigned int nbBands = static_cast<unsigned int>(atoi(argv[4]));
   const char * rootPath = argv[5];
   unsigned int radius = atoi(argv[6]);
   const char * outfilename = argv[7];

   
   typedef unsigned short LabelType;
   const unsigned int Dimension = 2;
   typedef otb::Image<LabelType, Dimension>                                           LabeledImageType;
   typedef otb::VectorImage<double, Dimension>                                        ImageType;
   typedef otb::ImageFileWriter<LabeledImageType>                                            WriterType;
   typedef otb::VectorData<double, Dimension>                                         VectorDataType;
   typedef otb::AttributesMapLabelObject<LabelType, Dimension, std::string>           LabelObjectType;
   typedef itk::LabelMap<LabelObjectType>                                             LabelMapType;
   typedef otb::VectorDataFileReader<VectorDataType>                                  VectorDataFileReaderType;
   typedef otb::SpatialisationFilter<VectorDataType,LabelMapType,LabeledImageType>    SpatialisationFilterType;
   typedef otb::LabelMapToSimulatedImageFilter<LabelMapType, ImageType>               LabelMapToSimulatedImageFilterType;
   
   

   typedef otb::MultiToMonoChannelExtractROI<double,double>                           MultiToMonoChannelFilter;
   typedef MultiToMonoChannelFilter::OutputImageType                                  SingleImageType;
   typedef otb::ImageList<SingleImageType>                                            ImageListType;
   typedef otb::ImageListToVectorImageFilter<ImageListType, ImageType>                ImageListToVectorImageFilter;
   typedef otb::ProlateInterpolateImageFunction<SingleImageType>                      InterpolatorType;
   typedef otb::StreamingResampleImageFilter<SingleImageType, SingleImageType, double>            FTMFilterType;
   
   typedef otb::SVMImageModelEstimator<ImageType,LabeledImageType>                    SVMEstimatorType;
   typedef otb::SVMImageClassificationFilter<ImageType, LabeledImageType>             SVMClassificationFilterType;
   typedef otb::ImageFileReader<LabeledImageType>                                     ImageReaderType;
   
   /** Instantiation of pointer objects*/
   VectorDataFileReaderType::Pointer reader = VectorDataFileReaderType::New();
   SpatialisationFilterType::Pointer spatialisationFilter = SpatialisationFilterType::New();
   LabelMapToSimulatedImageFilterType::Pointer labelMapToImageFilter = LabelMapToSimulatedImageFilterType::New();
   FTMFilterType::Pointer ftmFilter = FTMFilterType::New();
   InterpolatorType::Pointer prolate = InterpolatorType::New();
   WriterType::Pointer writer = WriterType::New();
   SVMEstimatorType::Pointer      svmEstimator   = SVMEstimatorType::New();
   ImageReaderType::Pointer trainingReader = ImageReaderType::New();
   SVMClassificationFilterType::Pointer classifier = SVMClassificationFilterType::New();

   
   reader->SetFileName(infilename);
   reader->Update();
   trainingReader->SetFileName(inTrainingfilename);
   trainingReader->Update();
   
   
   spatialisationFilter->SetInputVectorData(reader->GetOutput());
   spatialisationFilter->UpdateData();
   
   spatialisationFilter->GetOutputLabelMap()->PrintLabelObjects();
   
   labelMapToImageFilter->SetInput(spatialisationFilter->GetOutputLabelMap());
   labelMapToImageFilter->SetNumberOfComponentsPerPixel(nbBands);
   labelMapToImageFilter->SetSatRSRFilename(satRSRFilename);
   labelMapToImageFilter->SetNumberOfThreads(1);
   labelMapToImageFilter->SetPathRoot(rootPath);
   labelMapToImageFilter->UpdateOutputInformation();
//    labelMapToImageFilter->Update();
   
   ImageListType::Pointer imageList = ImageListType::New();
   ImageListToVectorImageFilter::Pointer imageListToVectorImageFilter = ImageListToVectorImageFilter::New();
   for(unsigned int i = 0; i<nbBands; i++)
   {
      MultiToMonoChannelFilter::Pointer filter = MultiToMonoChannelFilter::New();
      filter->SetInput(labelMapToImageFilter->GetOutput());
      filter->SetChannel(i+1);
      filter->SetExtractionRegion(labelMapToImageFilter->GetOutput()->GetLargestPossibleRegion());

      prolate->SetInputImage(filter->GetOutput());
      prolate->SetRadius(radius);
      prolate->Initialize();
      
      ftmFilter->SetInterpolator(prolate);
      ftmFilter->SetOutputSize(labelMapToImageFilter->GetOutput()->GetLargestPossibleRegion().GetSize());
      ftmFilter->SetOutputSpacing(labelMapToImageFilter->GetOutput()->GetSpacing());
      ftmFilter->SetOutputOrigin(labelMapToImageFilter->GetOutput()->GetOrigin());
      ftmFilter->SetInput(filter->GetOutput());
      ftmFilter->Update();
      imageList->PushBack(ftmFilter->GetOutput());
   }
   imageListToVectorImageFilter->SetInput(imageList);
//    imageListToVectorImageFilter->Update();
   
   svmEstimator->SetInputImage(imageListToVectorImageFilter->GetOutput());
   svmEstimator->SetTrainingImage(trainingReader->GetOutput());
   svmEstimator->SetParametersOptimization(false);
//    svmEstimator->DoProbabilityEstimates(true);
   svmEstimator->Update();


   classifier->SetModel(svmEstimator->GetModel());
   classifier->SetInput(imageListToVectorImageFilter->GetOutput());
  
   //Write the result to an image file
   writer->SetFileName(outfilename);
   writer->SetInput(classifier->GetOutput());
   writer->Update();
   
   return EXIT_SUCCESS;
}
