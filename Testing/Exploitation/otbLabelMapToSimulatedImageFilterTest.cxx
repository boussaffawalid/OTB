/*=========================================================================

  Program:   ORFEO Toolbox
  Language:  C++
  Date:      $Date$
  Version:   $Revision$


  Copyright (c) Centre National d'Etudes Spatiales. All rights reserved.
  See OTBCopyright.txt for details.


  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#include "otbVectorData.h"
#include "otbVectorDataFileReader.h"
#include "otbVectorDataToLabelMapWithAttributesFilter.h"
#include "otbAttributesMapLabelObject.h"
#include "otbVectorDataProperties.h"
#include "itkLabelMapToLabelImageFilter.h"
#include "itkLabelMapToBinaryImageFilter.h"
#include "otbVectorImage.h"
#include "otbImageFileWriter.h"
#include "otbLabelMapToSimulatedImageFilter.h"

int otbLabelMapToSimulatedImageFilterTest(int argc, char * argv[])
{
   const char * infilename  = argv[1];
   const char * satRSRFilename = argv[2];
   unsigned int nbBands = static_cast<unsigned int>(atoi(argv[3]));
   const char * outfilename = argv[4];
   
   typedef unsigned short LabelType;
   const unsigned int Dimension = 2;
   typedef otb::VectorImage<double, Dimension>                                         LabeledImageType;
   typedef otb::ImageFileWriter<LabeledImageType>                                         WriterType;
   typedef otb::VectorData<double, Dimension>                                             VectorDataType;
   typedef otb::AttributesMapLabelObject<LabelType, Dimension, std::string>               LabelObjectType;
   typedef itk::LabelMap<LabelObjectType>                                                 LabelMapType;
   typedef otb::VectorDataFileReader<VectorDataType>                                      VectorDataFileReaderType;
   typedef otb::VectorDataToLabelMapWithAttributesFilter<VectorDataType, LabelMapType>    VectorDataToLabelMapFilterType;
   typedef otb::VectorDataProperties<VectorDataType>                                      VectorDataPropertiesType;
   typedef otb::LabelMapToSimulatedImageFilter<LabelMapType, LabeledImageType>            LabelMapToSimulatedImageFilterType;
   
   typedef VectorDataType::DataNodeType::PolygonType::RegionType               RegionType;
   
   
   /** Instantiation of pointer objects*/
   VectorDataFileReaderType::Pointer reader = VectorDataFileReaderType::New();
   VectorDataToLabelMapFilterType::Pointer vectorDataToLabelMap = VectorDataToLabelMapFilterType::New();
   VectorDataPropertiesType::Pointer vectorDataProperties = VectorDataPropertiesType::New();
   LabelMapToSimulatedImageFilterType::Pointer labelMapToImageFilter = LabelMapToSimulatedImageFilterType::New();
   WriterType::Pointer writer = WriterType::New();
   
   RegionType region;
   LabelMapType::PointType origin;


   reader->SetFileName(infilename);
   reader->Update();
   
   //VectorDataProperties is needed to compute the ROI of the vectorData
   //set the input vectordata to the vectordataproperties
   vectorDataProperties->SetVectorDataObject(reader->GetOutput());
   vectorDataProperties->SetBoundingRegion(region);
   //Compute the global bounding box of the vectordata
   vectorDataProperties->ComputeBoundingRegion();
   
   origin[0] = vectorDataProperties->GetBoundingRegion().GetImageRegion().GetIndex(0);
   origin[1] = vectorDataProperties->GetBoundingRegion().GetImageRegion().GetIndex(1);
   
   
   //Set size,origin and spacing of the output labelmap
   vectorDataToLabelMap->SetInput(reader->GetOutput());
   vectorDataToLabelMap->SetSize(vectorDataProperties->GetBoundingRegion().GetImageRegion().GetSize());
   vectorDataToLabelMap->SetOrigin(origin);
   vectorDataToLabelMap->SetSpacing(reader->GetOutput()->GetSpacing());
   //   vectorDataToLabelMap->Update();
      
   labelMapToImageFilter->SetInput(vectorDataToLabelMap->GetOutput());
   labelMapToImageFilter->SetNumberOfComponentsPerPixel(nbBands);
   labelMapToImageFilter->SetSatRSRFilename(satRSRFilename);
   labelMapToImageFilter->SetNumberOfThreads(1);
   labelMapToImageFilter->SetPathRoot("/home2/arnaud/PROJETS/SimuCapteur/data/BD-CNES/jpl/beckman/minerals/");
   
   //Write the result to an image file
   writer->SetFileName(outfilename);
   writer->SetInput(labelMapToImageFilter->GetOutput());
   writer->Update();
   
   return EXIT_SUCCESS;
}
