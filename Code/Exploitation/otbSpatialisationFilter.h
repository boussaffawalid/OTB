/*=========================================================================

  Program:   ORFEO Toolbox
  Language:  C++
  Date:      $Date$
  Version:   $Revision$


  Copyright (c) Centre National d'Etudes Spatiales. All rights reserved.
  See OTBCopyright.txt for details.


     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/

#ifndef __otbSpatialisationFilter_h
#define __otbSpatialisationFilter_h

#include "itkLabelObject.h"
#include "otbLabelMapSource.h"
#include "itkSize.h"
#include "itkImageRegionIterator.h"
#include "otbImage.h"

namespace otb
{

/**
 * \class SpatialisationFilter
 * \brief Convert a vector data into a label map and a label image
 *
 * SpatialisationFilter convert a vector data in a LabelMap and a label image
 * Each distinct object is assigned a unique label.
 * The final object labels start with 1 and are consecutive (depraced +10).
 *
 * \sa LabelMapSource
 */

template <class TLabelMap>
class ITK_EXPORT SpatialisationFilter :
  public LabelMapSource<TLabelMap>

{
public:
   /**
   * Standard "Self" & Superclass typedef.
   */
   typedef SpatialisationFilter Self;
   typedef LabelMapSource<TLabelMap>     Superclass;
   typedef itk::SmartPointer<Self>       Pointer;
   typedef itk::SmartPointer<const Self> ConstPointer;

   /** Some convenient typedefs. */
   typedef TLabelMap                                 OutputLabelMapType;
   typedef typename OutputLabelMapType::Pointer      OutputLabelMapPointer;
   typedef typename OutputLabelMapType::ConstPointer OutputLabelMapConstPointer;
   typedef typename OutputLabelMapType::IndexType    IndexType;
   typedef typename OutputLabelMapType::RegionType   RegionType;
   
   typedef itk::Size<2>              SizeType;
   typedef std::vector<std::string>  VectorType;
   
   

   /** Standard Macro*/
   itkTypeMacro(SpatialisationFilter, LabelMapSource);
   itkNewMacro(Self);

   /**Set input vector data*/
   itkSetMacro(ObjectSize, SizeType);
   itkGetMacro(ObjectSize, SizeType);
   
   itkSetMacro(NumberOfObjects, SizeType);
   itkGetMacro(NumberOfObjects, SizeType);
   
//    itkSetMacro(PathVector, VectorType);
//    itkGetMacro(PathVector, VectorType);
//    
//    itkSetMacro(AreaVector, VectorType);
//    itkGetMacro(AreaVector, VectorType);
   void SetPathVector(VectorType & v)
   {
      m_PathVector=v;
   }
   
   void SetAreaVector(VectorType & v)
   {
      m_AreaVector=v;
   }
   
   


   
protected:
   SpatialisationFilter();
   virtual ~SpatialisationFilter() {}
   void PrintSelf(std::ostream& os, itk::Indent indent) const;
   
   virtual void GenerateData();
   virtual void ProcessObject(unsigned int obj);
  virtual void GenerateOutputInformation();

private:
   SpatialisationFilter(const Self &); //purposely not implemented
   void operator =(const Self&); //purposely not implemented
  
   SizeType m_ObjectSize;
   SizeType m_NumberOfObjects;
   VectorType m_PathVector; //vector containing the spectrum path (if any) for each object
   VectorType m_AreaVector; //vector containing the the type of each object

};

} // end namespace itk

#ifndef OTB_MANUAL_INSTANTIATION
#include "otbSpatialisationFilter.txx"
#endif

#endif
