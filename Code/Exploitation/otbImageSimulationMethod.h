/*=========================================================================

  Program:   ORFEO Toolbox
  Language:  C++
  Date:      $Date$
  Version:   $Revision$


  Copyright (c) Centre National d'Etudes Spatiales. All rights reserved.
  See OTBCopyright.txt for details.


     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/

#ifndef __otbImageSimulationMethod_h
#define __otbImageSimulationMethod_h


#include "itkImageSource.h"
#include "otbProspectModel.h"
#include "otbSailModel.h"
#include "otbReduceSpectralResponse.h"
#include "otbGaussianAdditiveNoiseSampleListFilter.h"
#include "otbSpectralResponse.h"
#include "otbSatelliteRSR.h"
#include "otbLeafParameters.h"


namespace otb
{

/**
 * \class ImageSimulationMethod
 * \brief image simulation method
 *
 * ImageSimulationMethod convert a vectorData into a image of reflectance.
 * Reflectance of the image are computed by applying the RSR of the satellite to the spectrum obtained
 * by the spectrum simulator. Then the satellite FTM is applied using otbThreamingResampleImageFilter and a ProlateInterpolateImageFunction.
 * 
 *
 * \sa ImageSource
 */

template <class TInputVectorData, class TSpatialisation, class TProspect, class TSail, class TFTM, class TOutputImage>
class ITK_EXPORT ImageSimulationMethod :
  public itk::ImageSource <TOutputImage>

{
public:
   /**
   * Standard "Self" & Superclass typedef.
   */
   typedef ImageSimulationMethod                       Self;
   typedef itk::ImageSource <TOutputImage>             Superclass;
   typedef itk::SmartPointer<Self>                     Pointer;
   typedef itk::SmartPointer<const Self>               ConstPointer;

   /** Some convenient typedefs. */
   typedef TInputVectorData                              InputVectorDataType;
   typedef typename InputVectorDataType::Pointer         InputVectorDataPointer;
   typedef typename InputVectorDataType::ConstPointer    InputVectorDataConstPointer;
   
   typedef TSpatialisation                  SpatialisationType;
   typedef typename SpatialisationType::Pointer SpatialisationPointerType;
   typedef TProspect                        ProspectModelType;
   typedef TSail                            SailModelType;
   typedef TFTM                             FTMType;


   typedef TOutputImage                              OutputImageType;
   typedef typename OutputImageType::ConstPointer    OutputImageConstPointer;
   typedef typename OutputImageType::Pointer         OutputImagePointer;
   typedef typename OutputImageType::IndexType       IndexType;
   typedef typename OutputImageType::InternalPixelType InternalPixelType;


   //TODO surement a modifier
   typedef SpectralResponse<double,double>           SpectralResponseType;
   typedef SatelliteRSR<double,double>               SatelliteRSRType;
   typedef ReduceSpectralResponse<SpectralResponseType,SatelliteRSRType> ReduceSpectralResponseType;
   typedef LeafParameters                            LeafParametersType;
   typedef itk::Statistics::MersenneTwisterRandomVariateGenerator RandomGeneratorType;
   
   
   
   /** Standard Macro*/
   itkTypeMacro(ImageSimulationMethod, ImageSource);
   itkNewMacro(Self);

   itkSetMacro(NumberOfComponentsPerPixel, unsigned int);
   itkGetMacro(NumberOfComponentsPerPixel, unsigned int);
   
   itkSetMacro(SatRSRFilename, std::string);
   itkGetMacro(SatRSRFilename, std::string);

   itkSetMacro(PathRoot, std::string);
   itkGetMacro(PathRoot, std::string);
   
   itkSetObjectMacro(Spatialisation, SpatialisationType);
//    itkSetObjectMacro(LabelMapToSimulatedImage, LabelMapToSimulatedImageType);
   itkSetObjectMacro(Prospect, ProspectModelType);
   itkSetObjectMacro(Sail, SailModelType);
   itkSetObjectMacro(FTM, FTMType);
   
   
   /** Set/Get Input */
   itkSetObjectMacro(InputVectorData, InputVectorDataType);
   itkGetConstObjectMacro(InputVectorData, InputVectorDataType);
//    void SetInput(const InputVectorDataType *object);
//    InputVectorDataType * GetInput();
   
protected:
   ImageSimulationMethod();
   virtual ~ImageSimulationMethod() {}
   void PrintSelf(std::ostream& os, itk::Indent indent) const;

   virtual void GenerateData();
//    virtual void GenerateOutputInformation();

   typedef typename SpatialisationType::OutputLabelMapType LabelMapType;
   typedef typename LabelMapType::LabelObjectContainerType LabelObjectContainerType;
   typedef typename LabelObjectContainerType::const_iterator LabelObjectContainerConstIterator;
   typedef typename SpatialisationType::OutputLabelMapType::LabelObjectType LabelObjectType;

private:
   ImageSimulationMethod(const Self &); //purposely not implemented
   void operator =(const Self&); //purposely not implemented
   
   unsigned int m_NumberOfComponentsPerPixel;
   std::string m_SatRSRFilename;
   std::string m_PathRoot;
   double m_Mean;
   double m_Variance;
   
   InputVectorDataPointer m_InputVectorData;
   SpatialisationPointerType m_Spatialisation;
//    typename LabelMapToSimulatedImageType::Pointer m_LabelMapToSimulatedImageFilter;
   typename ProspectModelType::Pointer m_Prospect;
   typename SailModelType::Pointer m_Sail;
   typename FTMType::Pointer m_FTM;

   LabelObjectContainerConstIterator m_LabelObjectIterator;

};

} // end namespace itk

#ifndef OTB_MANUAL_INSTANTIATION
#include "otbImageSimulationMethod.txx"
#endif

#endif
