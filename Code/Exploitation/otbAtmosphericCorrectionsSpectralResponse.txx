/*=========================================================================

  Program:   ORFEO Toolbox
  Language:  C++
  Date:      $Date$
  Version:   $Revision$


  Copyright (c) Centre National d'Etudes Spatiales. All rights reserved.
  See OTBCopyright.txt for details.


     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#ifndef __otbAtmosphericCorrectionsReduceSpectralResponse_txx
#define __otbAtmosphericCorrectionsReduceSpectralResponse_txx




// #include "otbAtmosphericCorrectionParameters.h"
// #include "otbAtmosphericRadiativeTerms.h"
#include "otbAtmosphericCorrectionsReduceSpectralResponse.h"
#include "otbAtmosphericCorrectionParametersTo6SAtmosphericRadiativeTerms.h"
#include "otbSurfaceReflectanceToReflectanceFilter.h"
// #include "otbAtmosphericCorrectionParameters.h"
namespace otb
{

template <class TSpectralResponse ,class TRSR>
AtmosphericCorrectionsReduceSpectralResponse<TSpectralResponse ,TRSR>
::AtmosphericCorrectionsReduceSpectralResponse()
  {
    //m_InputSpectralResponse = VectorType::New();
  }
/*
template <class TSpectralResponse ,class TRSR>
void  
AtmosphericCorrectionsReduceSpectralResponse<TSpectralResponse ,TRSR>
::LoadFilterFunctionAtmosphericCorrectionParameters(double step)
{
  //LMoad the filter function from the RSR
  for (unsigned int i=0; i<this->m_InputSatRSR->GetNbBands(); ++i)
  {
    m_DataAtmosphericCorrectionParameters->SetWavelenghtSpectralBandWithIndex(i, this->m_InputSatRSR->GetRSR()[i]->GetFilterFunctionValues (step));
  }
}
*/
template <class TSpectralResponse ,class TRSR>
void  
AtmosphericCorrectionsReduceSpectralResponse<TSpectralResponse ,TRSR>
::Process6S()
{
  typedef otb::AtmosphericCorrectionParametersTo6SAtmosphericRadiativeTerms
      AtmosphericCorrectionParametersTo6SRadiativeTermsType;
  
  AtmosphericCorrectionParametersTo6SRadiativeTermsType::Pointer  filterAtmosphericCorrectionParametersTo6SRadiativeTerms = AtmosphericCorrectionParametersTo6SRadiativeTermsType::New();
  /*
  if (useFilterFunction)
  {
    this->LoadFilterFunctionAtmosphericCorrectionParameters( step );
  }
  else 
  {
  */
    //Set filter function to 1 to get the RSR Sat!!!//TODO
    typedef otb::FilterFunctionValues FilterFunctionValuesType;
    typedef FilterFunctionValuesType::ValuesVectorType ValuesVectorType;
    ValuesVectorType valuesVector;
    const double step = 0.0025;
    unsigned int j = 0;
    for ( j = this->m_InputSpectralResponse->front()->first ; j <= this->m_InputSpectralResponse->back()->first; j+=step)
    {
      valuesVector.push_back(1.0);
    }
    otbGenericMsgDebugMacro(<<"valuesVector.size() " << valuesVector.size());
    FilterFunctionValuesType::Pointer functionValues = FilterFunctionValuesType::New();
    functionValues->SetFilterFunctionValues(valuesVector);
//     functionValues->SetMinSpectralValue(this->m_InputSpectralResponse->front()->first);
//     functionValues->SetMaxSpectralValue(this->m_InputSpectralResponse->back()->first);
//     
//     //TODO Is it the effecient method Problem in 6STraits
// //     functionValues->SetUserStep(0.0025);
//     functionValues->SetUserStep( ( ( this->m_InputSpectralResponse->back()->first - this->m_InputSpectralResponse->front()->first ) / ( ( this->m_InputSpectralResponse->size() - 1 ) ) ) /* *(1+ 0.1)*/ );
    
    functionValues->SetMinSpectralValue(this->m_InputSpectralResponse->front()->first);
    otbGenericMsgDebugMacro(<<"j - step " << j - step);
    functionValues->SetMaxSpectralValue(j - step);
    
    //TODO Is it the effecient method Problem in 6STraits
//     functionValues->SetUserStep(0.0025);
    functionValues->SetUserStep( step );
    
    m_DataAtmosphericCorrectionParameters->SetWavelenghtSpectralBandWithIndex(0, functionValues);
  /* }*/
//     otbGenericMsgDebugMacro(<<"function values" << functionValues);
  filterAtmosphericCorrectionParametersTo6SRadiativeTerms->SetInput( m_DataAtmosphericCorrectionParameters );
  
  otbGenericMsgDebugMacro(<<"6S parameters " << m_DataAtmosphericCorrectionParameters);
  filterAtmosphericCorrectionParametersTo6SRadiativeTerms->Update();
   
  otbGenericMsgDebugMacro(<<"6S radiative term performed");
  
  typedef typename Superclass::ImageType       ImageType;
  
  typedef SurfaceReflectanceToReflectanceFilter<ImageType, ImageType>              SurfaceReflectanceToReflectanceFilterType;
  typename SurfaceReflectanceToReflectanceFilterType::Pointer filterSRToR = SurfaceReflectanceToReflectanceFilterType::New();

  filterSRToR->SetAtmosphericRadiativeTerms( filterAtmosphericCorrectionParametersTo6SRadiativeTerms->GetOutput() );
  filterSRToR->SetInput( this->m_InputSpectralResponse->GetImage() );
   
  filterSRToR->Update();
  
  otbGenericMsgDebugMacro(<<"image reflectance " << filterSRToR->GetOutput());
  
  this->SetFromImage( filterSRToR->GetOutput() );
}
} // end namespace otb

#endif
