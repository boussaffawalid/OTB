/*=========================================================================

  Program:   ORFEO Toolbox
  Language:  C++
  Date:      $Date$
  Version:   $Revision$


  Copyright (c) Centre National d'Etudes Spatiales. All rights reserved.
  See OTBCopyright.txt for details.


     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#ifndef __otbAtmosphericCorrectionsSpectralResponse_txx
#define __otbAtmosphericCorrectionsSpectralResponse_txx




// #include "otbAtmosphericCorrectionParameters.h"
// #include "otbAtmosphericRadiativeTerms.h"
#include "otbAtmosphericCorrectionsSpectralResponse.h"
#include "otbAtmosphericCorrectionParametersTo6SAtmosphericRadiativeTerms.h"
#include "otbSurfaceReflectanceToReflectanceFilter.h"
// #include "otbAtmosphericCorrectionParameters.h"
namespace otb
{

template <class TPrecision, class TValuePrecision>
AtmosphericCorrectionsSpectralResponse<TPrecision,TValuePrecision>
::AtmosphericCorrectionsSpectralResponse()
  {
    //m_Response = VectorType::New();
  }
/*
template <class TPrecision, class TValuePrecision>
void  
AtmosphericCorrectionsSpectralResponse<TPrecision,TValuePrecision>
::LoadFilterFunctionAtmosphericCorrectionParameters(double step)
{
  //LMoad the filter function from the RSR
  for (unsigned int i=0; i<this->m_InputSatRSR->GetNbBands(); ++i)
  {
    m_DataAtmosphericCorrectionParameters->SetWavelenghtSpectralBandWithIndex(i, this->m_InputSatRSR->GetRSR()[i]->GetFilterFunctionValues (step));
  }
}
*/
template <class TPrecision, class TValuePrecision>
void  
AtmosphericCorrectionsSpectralResponse<TPrecision,TValuePrecision>
::Process6S()
{
  typedef otb::AtmosphericCorrectionParametersTo6SAtmosphericRadiativeTerms
      AtmosphericCorrectionParametersTo6SRadiativeTermsType;
  
  AtmosphericCorrectionParametersTo6SRadiativeTermsType::Pointer  filterAtmosphericCorrectionParametersTo6SRadiativeTerms = AtmosphericCorrectionParametersTo6SRadiativeTermsType::New();
  /*
  if (useFilterFunction)
  {
    this->LoadFilterFunctionAtmosphericCorrectionParameters( step );
  }
  else 
  {
  */
    //Set filter function to 1 to get the RSR Sat!!!//TODO
    typedef otb::FilterFunctionValues
        FilterFunctionValuesType;
    typedef FilterFunctionValuesType::ValuesVectorType
        ValuesVectorType;
    ValuesVectorType valuesVector;
    for ( unsigned int j=0; j <  this->m_Response->Size(); ++j)
    {
      valuesVector.push_back(1.0);
    }
    FilterFunctionValuesType::Pointer functionValues = FilterFunctionValuesType::New();
    functionValues->SetFilterFunctionValues(valuesVector);
    functionValues->SetMinSpectralValue(this->m_Response->front()->second);
    functionValues->SetMaxSpectralValue(this->m_Response->back()->second);
    //functionValues->SetUserStep( step );
    m_DataAtmosphericCorrectionParameters->SetWavelenghtSpectralBandWithIndex(0, functionValues);
  /* }*/
  
  filterAtmosphericCorrectionParametersTo6SRadiativeTerms->SetInput( m_DataAtmosphericCorrectionParameters );
  
  filterAtmosphericCorrectionParametersTo6SRadiativeTerms->Update();
   
  typedef typename Superclass::ResponseType::ImageType       ImageType;
  
  typedef SurfaceReflectanceToReflectanceFilter<ImageType, ImageType>              SurfaceReflectanceToReflectanceFilterType;
  typename SurfaceReflectanceToReflectanceFilterType::Pointer filterSRToR = SurfaceReflectanceToReflectanceFilterType::New();

  filterSRToR->SetAtmosphericRadiativeTerms( filterAtmosphericCorrectionParametersTo6SRadiativeTerms->GetOutput() );
  filterSRToR->SetInput( this->m_Response->GetImage() );
   
  filterSRToR->Update();
  this->SetFromImage( filterSRToR->GetOutput() );
}
} // end namespace otb

#endif
