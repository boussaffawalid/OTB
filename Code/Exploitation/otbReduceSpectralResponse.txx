/*=========================================================================

  Program:   ORFEO Toolbox
  Language:  C++
  Date:      $Date$
  Version:   $Revision$


  Copyright (c) Centre National d'Etudes Spatiales. All rights reserved.
  See OTBCopyright.txt for details.


     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#ifndef __otbReduceSpectralResponse_txx
#define __otbReduceSpectralResponse_txx

#include "otbReduceSpectralResponse.h"

#include <algorithm>

namespace otb
{

  template <class TSpectralResponse ,class TRSR>
      ReduceSpectralResponse <TSpectralResponse ,TRSR>
  ::ReduceSpectralResponse()
  {
    //m_Response = VectorType::New();
  }

  template <class TSpectralResponse ,class TRSR>
      bool
          ReduceSpectralResponse<TSpectralResponse ,TRSR>
  ::Clear()
  {
    return ( m_InputSatRSR->Clear() & m_InputSpectralResponse->Clear() );
  }

  
  template <class TSpectralResponse ,class TRSR>
      inline typename ReduceSpectralResponse<TSpectralResponse ,TRSR>
  ::ValuePrecisionType
      ReduceSpectralResponse<TSpectralResponse ,TRSR>
  ::operator()(const unsigned int numBand)
  {
    if ( numBand >= m_InputSatRSR->GetNbBands() ) 
    {
       itkExceptionMacro(<< "There is no band num " << numBand << " in the RSR vector!(Size of the current RSR vector is " << m_InputSatRSR->GetNbBands() << ")" );
    }
    else {
      ValuePrecisionType res = 0;
      ValuePrecisionType response1;
      ValuePrecisionType response2;
      ValuePrecisionType inputRSR1;
      ValuePrecisionType inputRSR2;
    
      PrecisionType lambda1;
      PrecisionType lambda2;
    
      typename VectorPairType::const_iterator it;
      VectorPairType pairs = (m_InputSatRSR->GetRSR())[numBand]->GetResponse();
      it = pairs.begin();
//     std::cout << (*it)->first << " " << (*it)->second << std::endl;
     
      while ( it != pairs.end() -1 )
      {
      
        lambda1=(*it)->first;
        lambda2=(*(it+1))->first;
//       std::cout << lambda1 << std::endl;
//       std::cout << lambda2 << std::endl;
        inputRSR1=(*it)->second;
        inputRSR2=(*(it+1))->second;
        //std::cout << inputRSR1 << std::endl;
        response1 = (*m_InputSpectralResponse)( lambda1 ) * inputRSR1;
        response2 = (*m_InputSpectralResponse)( lambda2 ) * inputRSR2;
      
        //Compute the surface of the trapeze
        res += ( (response1 + response2)*( lambda2 - lambda1 ) ) / 2.0;  
        ++it;  
      }
      return res;
    }
    
  }
  
  template <class TSpectralResponse ,class TRSR>
      void
          ReduceSpectralResponse<TSpectralResponse ,TRSR>
  ::CalculateResponse() 
  {
    //Compute the reduce response for each band of the sensor
    for (unsigned int i=0;i<m_InputSatRSR->GetNbBands();++i)
    {
      m_ReduceResponse.push_back((*this)(i));
    }
    
  }
  
  template <class TSpectralResponse ,class TRSR>
  void
  ReduceSpectralResponse<TSpectralResponse ,TRSR>
  ::LoadInputsFromFiles (const std::string & spectralResponseFile, const std::string & RSRFile, const unsigned int nbRSRBands)
  {
    //Instantiation
    m_InputSpectralResponse=InputSpectralResponseType::New();
    /** Load the spectral response file*/
    m_InputSpectralResponse->Load(spectralResponseFile);
  
    m_InputSatRSR=InputRSRType::New();
    /** Set the satelite number of bands */
    m_InputSatRSR->SetNbBands(nbRSRBands);
    /** Load the satelite response file*/
    m_InputSatRSR->Load(RSRFile);
  }
  template <class TSpectralResponse ,class TRSR>
      void
          ReduceSpectralResponse<TSpectralResponse ,TRSR>
  ::PrintSelf(std::ostream& os, itk::Indent indent) const
  {
    Superclass::PrintSelf(os,indent);
    os<<std::endl;
    for(typename ReduceSpectralResponseVectorType::const_iterator it = m_ReduceResponse.begin(); it != m_ReduceResponse.end(); ++it)
    {
      os << "Band Nb: " << it - m_ReduceResponse.begin() << " Response= " << (*it) <<std::endl;
      os << std::endl;
    }
  }
} // end namespace otb

#endif
